#Область СлужебныеПроцедурыИФункции

#Область СвязиОбъектов

// Создает связь между объектом основанием и объектом, который был создан на его основании
//
// Параметры:
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//   ОбъектРезультат -  СправочникСсылка, ДокументСсылка - ссылка на объект результат.
//   Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//			   подчиненные объекты.
//
// Пример:
//   СоздатьСвязьОбъектов(ОбъектОснование, ОбъектРезультат, Правило); 
//
Процедура СоздатьСвязьОбъектов(ОбъектОснование, ОбъектРезультат, Правило) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.асд_СвязанныеОбъекты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектРезультат = ОбъектРезультат.Ссылка;
	МенеджерЗаписи.ОбъектОснование = ОбъектОснование.Ссылка;
	МенеджерЗаписи.Правило = Правило;
	МенеджерЗаписи.ДатаСоздания = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет связи документа из регистра сведений асд_СвязанныеОбъекты.
//
// Параметры:
//   ОбъектСсылка - СправочникСсылка, ДокументСсылка - ссылка для которой удаляем связи.
//
// Пример:
//   асд_ОсновнойМодульСервер.УдалитьСвязиОбъекта(ОбъектСсылка);
//
Процедура УдалитьСвязиОбъекта(ОбъектСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ОбъектОснование,
	|	ОбъектРезультат,
	|	Правило
	|ИЗ
	|	РегистрСведений.асд_СвязанныеОбъекты
	|ГДЕ
	|	ОбъектОснование = &ОбъектОснование
	|";
	
	Запрос.УстановитьПараметр("ОбъектОснование", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.асд_СвязанныеОбъекты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЖурналОшибок

// Создает запись о возникшей ошибке в регистре сведений "асд_ЖурналОшибок"
//
// Параметры:
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//   ОбъектРезультат -  СправочникСсылка, ДокументСсылка - ссылка на объект результат.
//   Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//			   подчиненные объекты.
//   Ошибка - Строка - текст возникшей ошибки.
//
// Пример:
//   СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, ОбъектРезультат, Правило, Ошибка); 
//
Процедура СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, ОбъектРезультат, Правило, Ошибка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.асд_ЖурналОшибок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	МенеджерЗаписи.Дата = ТекущаяДата();
	МенеджерЗаписи.ОбъектОснование = ОбъектОснование.Ссылка;
	
	Если ЗначениеЗаполнено(ОбъектРезультат) Тогда
		МенеджерЗаписи.ОбъектРезультат = ОбъектРезультат.Ссылка;
	КонецЕсли;
	
	МенеджерЗаписи.Правило = Правило;
	МенеджерЗаписи.Ошибка = Ошибка;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Производит обработку ранее возникших ошибок.
// Если было нормальное завершение создания объектов по правилу
// на основании объекта основания, то ранее возникшие ошибки
// по данному объекту и правилу будут помечены как обработанные.
//
// Параметры:
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//   Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//			   подчиненные объекты.
//
// Пример:
//   ОбработатьЗаписиОшибокВЖурнале(ОбъектОснование, Правило); 
//
Процедура ОбработатьЗаписиОшибокВЖурнале(ОбъектОснование, Правило)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	асд_ЖурналОшибок.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	асд_ЖурналОшибок.Дата КАК Дата,
		|	асд_ЖурналОшибок.Обработана КАК Обработана,
		|	асд_ЖурналОшибок.ОбъектОснование КАК ОбъектОснование,
		|	асд_ЖурналОшибок.ОбъектРезультат КАК ОбъектРезультат,
		|	асд_ЖурналОшибок.Ошибка КАК Ошибка,
		|	асд_ЖурналОшибок.Правило КАК Правило
		|ИЗ
		|	РегистрСведений.асд_ЖурналОшибок КАК асд_ЖурналОшибок
		|ГДЕ
		|	асд_ЖурналОшибок.ОбъектОснование = &ОбъектОснование
		|	И асд_ЖурналОшибок.Правило = &Правило
		|	И НЕ асд_ЖурналОшибок.Обработана";
	
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("ОбъектОснование", ОбъектОснование.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РезультатЗапроса.Выгрузить();
    МенеджерЗаписи = РегистрыСведений.асд_ЖурналОшибок.СоздатьМенеджерЗаписи();
    
    Для Каждого ТекЗапись Из НаборЗаписей Цикл
        ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекЗапись);
        МенеджерЗаписи.Прочитать();
        МенеджерЗаписи.Обработана = Истина;
        МенеджерЗаписи.Записать();
    КонецЦикла;
	
КонецПроцедуры

//Обработка возникающих ошибок.
//В теле данной предеопределенной процедуры разработчик может разместить
//код, производящий обработку возникающих ошибок.
//Вызов происходит при записи набора записей рс "асд_ЖурналОшибок"
//в виде фонового задания
//
//@skip-warning
Процедура ОбработатьОшибки() Экспорт
	
	//В случае необходимости - здесь описать обработчик возникающих ошибок в работе АСД

КонецПроцедуры

#КонецОбласти

#Область АвтоматическиСоздаваемыеДанные

// Точка входа в подсистему при выхове из модуя подписок на события.
// По переданным параметрам производит обработку правил АСД.  
//
// Параметры:
//   ПараметрыПроцедуры - Структура:
//     * ОбъектОснование - СправочникСсылка, ДокументСсылка - ссылка на объект основание.  
//     * GUIDРодительскогоПотока - GUID - идентификатор родительского потока.  
//     * ИсполняемаяКоманда - Строка - исполняемая команда.
//     * ОтменятьПроведениеПодчиненных - Булево - признак того, что нужно производить
//     									 отмену проведения или помечать на удаление
//     									 подчиненные объекты.
//				    
//   АдресВоВременномХранилище - Строка - адрес во временном хранилище для сохранения результата,
//   							 не используется, нужно для совместимости с БСП.
//   							 
// Пример:
//   ДлительныеОперации.ВыполнитьВФоне("асд_ОсновнойМодульСервер.МенеджерАСД", ПараметрыПроцедуры, ПараметрыВыполнения);
//
Процедура МенеджерАСД(ПараметрыПроцедуры = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	//Параметры процедуры
	ОбъектОснование		  			= ПараметрыПроцедуры.ОбъектОснованиеСсылка;
	ИсполняемаяКоманда  			= ПараметрыПроцедуры.ИсполняемаяКоманда;
	GUIDРодительскогоПотока 		= ПараметрыПроцедуры.GUIDРодительскогоПотока;
	ОтменятьПроведениеПодчиненных	= ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных;
	
	// Определимся с потоками
	РодительскийПоток = ?(GUIDРодительскогоПотока = Неопределено, Неопределено, ФоновыеЗадания.НайтиПоУникальномуИдентификатору(GUIDРодительскогоПотока));
	
	Если РодительскийПоток <> Неопределено Тогда
		// Дождемся завершения потока
		Если РодительскийПоток.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			РодительскийПоток = РодительскийПоток.ОжидатьЗавершенияВыполнения(18000);
		КонецЕсли;
		
		Если РодительскийПоток.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
			// Если родительский поток завершился ошибкой - прерываем текущий поток
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Здесь оказываемся, если родительский поток завершился штатно
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	асд_Правила.Ссылка КАК Правило,
		|	асд_Правила.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Правила
		|ИЗ
		|	Справочник.асд_Правила КАК асд_Правила
		|ГДЕ
		|	асд_Правила.ПометкаУдаления = ЛОЖЬ
		|	И асд_Правила.Активно
		|	И асд_Правила.ТипОбъектОснование = &ТипОбъектОснование
		|	И НЕ асд_Правила.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	асд_СвязанныеОбъекты.Правило КАК Правило,
		|	асд_СвязанныеОбъекты.ОбъектРезультат КАК ОбъектРезультат,
		|	асд_СвязанныеОбъекты.ДатаСоздания КАК ДатаСоздания
		|ПОМЕСТИТЬ ВТ_Объекты
		|ИЗ
		|	РегистрСведений.асд_СвязанныеОбъекты КАК асд_СвязанныеОбъекты
		|ГДЕ
		|	асд_СвязанныеОбъекты.ОбъектОснование = &ОбъектОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Правила.Приоритет КАК Приоритет,
		|	ВТ_Правила.Правило КАК Правило,
		|	ЕСТЬNULL(ВТ_Объекты.ОбъектРезультат, НЕОПРЕДЕЛЕНО) КАК ОбъектРезультат,
		|	ЕСТЬNULL(ВТ_Объекты.ДатаСоздания, НЕОПРЕДЕЛЕНО) КАК ДатаСоздания
		|ИЗ
		|	ВТ_Правила КАК ВТ_Правила
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Объекты КАК ВТ_Объекты
		|		ПО ВТ_Правила.Правило = ВТ_Объекты.Правило
		|
		|УПОРЯДОЧИТЬ ПО
		|	#Приоритет#,
		|	ВТ_Правила.Правило.Наименование,
		|	ВТ_Объекты.ДатаСоздания УБЫВ
		|ИТОГИ ПО
		|	Приоритет,
		|	Правило";
	
	КомандыСУбываниемПриоритета = Новый Массив;
	КомандыСУбываниемПриоритета.Добавить("ОбработкаУдаленияПроведенияДокумента");
	КомандыСУбываниемПриоритета.Добавить("ПередУдалениемДокумента");
	КомандыСУбываниемПриоритета.Добавить("ПередУдалениемСправочника");
	
	Если КомандыСУбываниемПриоритета.Найти(ИсполняемаяКоманда) <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Приоритет#", "Приоритет УБЫВ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Приоритет#", "Приоритет");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектОснование", ОбъектОснование); 
	Запрос.УстановитьПараметр("ТипОбъектОснование", ПолучитьИмяТипаОбъекта(ОбъектОснование));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// В результате запроса собранные данные по пулам правил и подчиненных объектов
	// Цикл по пулам правил
	ВыборкаПриоритет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПриоритет.Следующий() Цикл
		// Цикл по пулам правил
		МассивФоновыхЗаданий = Новый Массив;
		
		ВыборкаПравило = ВыборкаПриоритет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПравило.Следующий() Цикл
			// Цикл по объектам правил
			Если НЕ НужнаОбработкаАСД(ОбъектОснование, ВыборкаПравило.Правило) Тогда
				Продолжить;
			КонецЕсли;
			// Собираем все подчиненные объекты в массив
			НайденныеСсылки = Новый Массив;
			
			ВыборкаДетальныеЗаписи = ВыборкаПравило.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРезультат) Тогда
					НайденныеСсылки.Добавить(ВыборкаДетальныеЗаписи.ОбъектРезультат)
				КонецЕсли;
			КонецЦикла;
			
			Если НужнаОбработкаПодчиненных(ИсполняемаяКоманда, ОбъектОснование) Тогда
				Если НЕ ОбработатьПодчиненныеОбъекты(ОбъектОснование, НайденныеСсылки, ВыборкаПравило.Правило) Тогда
					//Если возникли ошибки при обработке дочерних объектов - переходим к следующему правилу
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КлючТекущегоПотока = Новый УникальныйИдентификатор;
			
			ПараметрыПроцедуры = Новый Структура();
			ПараметрыПроцедуры.Вставить("ОбъектОснование",					ОбъектОснование);
			ПараметрыПроцедуры.Вставить("Правило",							ВыборкаПравило.Правило);
			ПараметрыПроцедуры.Вставить("ИсполняемаяКоманда",				ИсполняемаяКоманда);
			ПараметрыПроцедуры.Вставить("НайденныеСсылки",					НайденныеСсылки);
			ПараметрыПроцедуры.Вставить("КлючТекущегоПотока",				КлючТекущегоПотока);
			ПараметрыПроцедуры.Вставить("ОтменятьПроведениеПодчиненных", 	ОтменятьПроведениеПодчиненных);
			
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка правил АСД'");
			ПараметрыВыполнения.ОжидатьЗавершение = 0;
			ПараметрыВыполнения.КлючФоновогоЗадания = КлючТекущегоПотока;
			
			РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("асд_ОсновнойМодульСервер.ОбработатьПравилоАСД", ПараметрыПроцедуры, ПараметрыВыполнения);
			
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.НайтиПоУникальномуИдентификатору(РезультатЗапуска.ИдентификаторЗадания));
			
		КонецЦикла;
		
		Если МассивФоновыхЗаданий.ВГраница() = -1 Тогда
			// Если не находим фоновые задания по ключам - продолжаем цикл по следующему приоритету
			Продолжить;
		КонецЕсли;
		
		// Ожидаем завершение всех потоков пула
		Если КоличествоАктивныхПотоков(МассивФоновыхЗаданий) Тогда
			Для Каждого ФоновоеЗаданиеПула Из МассивФоновыхЗаданий Цикл
				ФоновоеЗаданиеПула = ФоновоеЗаданиеПула.ОжидатьЗавершенияВыполнения(18000);
				//Если поток завершиился ошибкой - продолжать или прерывать менеджер вообще?
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Производит обработку подчиненных объектов по переданному правилу.
//
// Параметры:
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//   НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив ссылок,
//   				   из которых нужно получить следующий объект.
//   Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//			   подчиненные объекты.
//
// Возвращаемое значение:
//   СправочникОбъект, ДокументОбъект - следующий объект.
//
// Пример:
//   НовыйОбъект = ПолучитьСледующийПодчиненныйОбъект(ОбъектОснование, НайденныеСсылки, Правило); 
//
Функция ПолучитьСледующийПодчиненныйОбъект(ОбъектОснование, НайденныеСсылки, Правило) Экспорт
	
	Если НайденныеСсылки.Количество() Тогда
		ВозвращаемыйОбъект = НайденныеСсылки[0].ПолучитьОбъект();
		НайденныеСсылки.Удалить(0);
	Иначе
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Правило.ТипОбъектРезультат);
		Если Лев(Правило.ТипОбъектРезультат, 9) = "Документ." Тогда
			ВозвращаемыйОбъект = МенеджерОбъекта.СоздатьДокумент();
		Иначе	
			ВозвращаемыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	Если Правило.ВначалеИспользоватьТиповойАлгоритм Тогда
		ВозвращаемыйОбъект.Заполнить(ОбъектОснование);
	КонецЕсли;
	
	СтруктураНастроек = Правило.НастройкиАСД.Получить();
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		МассивРеквизитов = Неопределено;
		СтруктураНастроек.Свойство("МассивРеквизитов", МассивРеквизитов);
		
		Если МассивРеквизитов <> Неопределено Тогда
			
			ДанныеЗаполнения = Новый Структура;
			
			Для каждого СтрокаРеквизита Из МассивРеквизитов Цикл
				ДанныеЗаполнения.Вставить(СтрокаРеквизита.Реквизит, СтрокаРеквизита.ЗначениеРеквизита);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ВозвращаемыйОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйОбъект;

КонецФункции

// Находит дерево подчиненных объектов.
//
// Параметры:
//   НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив ссылок,
//   				   по котрым необходимо построить дерево.
// Возвращаемое значение:
//   Массив из СправочникСсылка, ДокументСсылка - массив ссылок полученного дерева.
//
// Пример:
//   НайденныеСсылки = ПолучитьДеревоПодчиненныхОбъектов(НайденныеСсылки);
//
Функция ПолучитьДеревоПодчиненныхОбъектов(НайденныеСсылки)
	
	Если НЕ НайденныеСсылки.Количество() Тогда
		Возврат НайденныеСсылки;
	КонецЕсли;
	
	ТЗНайденныеСсылки = Новый ТаблицаЗначений;
	
	ТипВсеСсылкиДС = Новый ОписаниеТипов(Справочники.ТипВсеСсылки().Типы());
	ТипВсеСсылкиДС = Новый ОписаниеТипов(ТипВсеСсылкиДС, Документы.ТипВсеСсылки().Типы());
	
	ТЗНайденныеСсылки.Колонки.Добавить("ОбъектОснование", ТипВсеСсылкиДС);
	
	Для Цкл = 0 По НайденныеСсылки.Вграница() Цикл
		ТЗНайденныеСсылки.Добавить();
	КонецЦикла;
	
	ТЗНайденныеСсылки.ЗагрузитьКолонку(НайденныеСсылки, "ОбъектОснование");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИсходная.ОбъектОснование КАК Объект,
		|	0 КАК Уровень
		|ПОМЕСТИТЬ ВТ_Цикл
		|ИЗ
		|	&ТаблицаИсходная КАК ТаблицаИсходная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Объект,
		|	0 КАК Уровень
		|ПОМЕСТИТЬ ВТ_Общая";
	
	Запрос.Параметры.Вставить("ТаблицаИсходная", ТЗНайденныеСсылки);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Цикл.Объект КАК Объект,
		|	ВТ_Цикл.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТ_Объединенная
		|ИЗ
		|	ВТ_Цикл КАК ВТ_Цикл
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Общая.Объект,
		|	ВТ_Общая.Уровень
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	асд_СвязанныеОбъекты.ОбъектРезультат КАК Объект,
		|	ВТ_Цикл.Уровень + 1 КАК Уровень
		|ПОМЕСТИТЬ ВТ_Цикл2
		|ИЗ
		|	ВТ_Цикл КАК ВТ_Цикл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.асд_СвязанныеОбъекты КАК асд_СвязанныеОбъекты
		|		ПО ВТ_Цикл.Объект = асд_СвязанныеОбъекты.ОбъектОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Цикл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Общая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Цикл2.Объект КАК Объект,
		|	ВТ_Цикл2.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТ_Цикл
		|ИЗ
		|	ВТ_Цикл2 КАК ВТ_Цикл2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объединенная.Объект КАК Объект,
		|	ВТ_Объединенная.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_Объединенная КАК ВТ_Объединенная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Объединенная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Цикл2";
	
		
	Пока НЕ Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Цикл").ПолучитьДанные().Пустой() Цикл
		Запрос.Выполнить();
	КонецЦикла;
	
	ДеревоПодчиненныхТаблица = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Общая").ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат ДеревоПодчиненныхТаблица;

КонецФункции // ()

// Производит обработку подчиненных объектов по переданному правилу.
//
// Параметры:
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//   НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив ссылок,
//   				   которые необходимо обработать.
//   Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//			   подчиненные объекты.
//
// Возвращаемое значение:
//   Булево - были ли ошибки при исполнении кода данной функции,
//   		  Истина - ошибки были.
//
// Пример:
//   Если НЕ ОбработатьПодчиненныеОбъекты(ОбъектОснование, НайденныеСсылки, Правило) Тогда ...
//
Функция ОбработатьПодчиненныеОбъекты(ОбъектОснование, НайденныеСсылки, Правило)
	
	Если Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведение Тогда
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ОбъектОснование",					ОбъектОснование);								
		ПараметрыПроцедуры.Вставить("ТекущийПоток",						Неопределено);								
		ПараметрыПроцедуры.Вставить("НайденныеСсылки",					НайденныеСсылки);								
		ПараметрыПроцедуры.Вставить("Правило",							Правило);								
		ПараметрыПроцедуры.Вставить("ОтменятьПроведениеПодчиненных",	Истина);								
							
		ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
		
		Возврат НЕ ПараметрыПроцедуры.БылиОшибки;
		
	ИначеЕсли Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведениеДерева Тогда
		
		ДеревоПодчиненныхТаблица = ПолучитьДеревоПодчиненныхОбъектов(НайденныеСсылки);
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("ОбъектОснование",					ОбъектОснование);								
		ПараметрыПроцедуры.Вставить("ТекущийПоток",						Неопределено);								
		ПараметрыПроцедуры.Вставить("НайденныеСсылки",					ДеревоПодчиненныхТаблица);								
		ПараметрыПроцедуры.Вставить("Правило",							Правило);								
		ПараметрыПроцедуры.Вставить("ОтменятьПроведениеПодчиненных",	Ложь);								
							
		ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
		
		Возврат НЕ ПараметрыПроцедуры.БылиОшибки;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет, нужна ли обработка подчиненных
// объектов для исполняемой команды.
//
// Параметры:
//   ИсполняемаяКоманда - Строка - исполняемая команда.
//   ОбъектОснование -  СправочникСсылка, ДокументСсылка - ссылка на объект основание.
//
// Возвращаемое значение:
//   Булево - нужна ли обработка подчиненных объектов,
//   		  Истина - нужна.
//
// Пример:
//   Если НужнаОбработкаПодчиненных(ИсполняемаяКоманда, ОбъектОснование) Тогда ...
//
Функция НужнаОбработкаПодчиненных(ИсполняемаяКоманда, ОбъектОснование)
	
	МассивКоманд = Новый Массив;
	
	МассивКоманд.Добавить("ОбработкаПроведенияДокумента");
	МассивКоманд.Добавить("ПриЗаписиСправочника");
	
	Возврат МассивКоманд.Найти(ИсполняемаяКоманда) <> Неопределено И (НЕ ОбъектОснование.ПометкаУдаления);
	
КонецФункции

// Производит обработку правила АСД по переданным параметрам.  
//
// Параметры:
//   ПараметрыПроцедуры - Структура:
//     * ОбъектОснование - СправочникСсылка, ДокументСсылка - ссылка на объект основание.  
//     * КлючТекущегоПотока - GUID - идентификатор текущего потока.  
//     * НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив существующих
//   					   связей объекта основания из рс "асд_СвязанныеОбъекты".
//     * Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//				   подчиненные объекты.
//     * ОтменятьПроведениеПодчиненных - Булево - признак того, что нужно производить
//     									 отмену проведения или помечать на удаление
//     									 подчиненные объекты.
//   АдресВоВременномХранилище - Строка - адрес во временном хранилище для сохранения результата,
//   							 не используется, нужно для совместимости с БСП.
//   
// Пример:
//   РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("асд_ОсновнойМодульСервер.ОбработатьПравилоАСД",
//						ПараметрыПроцедуры, ПараметрыВыполнения);
//
Процедура ОбработатьПравилоАСД(ПараметрыПроцедуры = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Если ПараметрыПроцедуры.КлючТекущегоПотока = Неопределено Тогда
		// Если вызов идет без ключа - прерываем
		Возврат;
	КонецЕсли;
	
	ОтборФЗ = Новый Структура("Ключ", ПараметрыПроцедуры.КлючТекущегоПотока);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
	
	Если МассивФоновыхЗаданий.ВГраница() = -1 Тогда
		// Если не находим фоновое задание по ключу - прерываем
		Возврат;
	Иначе
		// Должно быть всего одно фоновое задание с уникальным ключом
		ПараметрыПроцедуры.Вставить("ТекущийПоток", МассивФоновыхЗаданий[0]);
	КонецЕсли;
	
	Если ПараметрыПроцедуры.ИсполняемаяКоманда = "ОбработкаПроведенияДокумента" Тогда
		СоздатьОбъектыПоПравилу(ПараметрыПроцедуры);
	ИначеЕсли ПараметрыПроцедуры.ИсполняемаяКоманда = "ОбработкаУдаленияПроведенияДокумента" Тогда
		// Анализируем параметры
		Если ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных Тогда
			Если ПараметрыПроцедуры.Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведение  Тогда
				ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
			ИначеЕсли ПараметрыПроцедуры.Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведениеДерева  Тогда
				ПараметрыПроцедуры.НайденныеСсылки = ПолучитьДеревоПодчиненныхОбъектов(ПараметрыПроцедуры.НайденныеСсылки);
				// Если удаляем дерево - отменяем отмену проведения подчиенных
				ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных = Ложь;
				ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
			КонецЕсли;
		КонецЕсли;
		//Если документ был помечен на удаление - разрываем его связи с подчиненными объектами
		Если ПараметрыПроцедуры.ОбъектОснование.ПометкаУдаления Тогда
			асд_ОсновнойМодульСервер.УдалитьСвязиОбъекта(ПараметрыПроцедуры.ОбъектОснование);
		КонецЕсли;
	ИначеЕсли ПараметрыПроцедуры.ИсполняемаяКоманда = "ПриЗаписиСправочника" Тогда
		//Для элементов справочников действия зависят от пометки на удаление
		Если НЕ ПараметрыПроцедуры.ОбъектОснование.ПометкаУдаления Тогда
			СоздатьОбъектыПоПравилу(ПараметрыПроцедуры);
		Иначе
			//При пометке на удаление - действуем аналогично отмене проведения/удалению для документов
			Если ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных Тогда
				Если ПараметрыПроцедуры.Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведение Тогда
					ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
				ИначеЕсли ПараметрыПроцедуры.Правило.ДействиеСПодчиненнымиОбъектами = Перечисления.асд_ДействияСПодчиненнымиОбъектами.ОтменитьПроведениеДерева Тогда
					ПараметрыПроцедуры.НайденныеСсылки = ПолучитьДеревоПодчиненныхОбъектов(
						ПараметрыПроцедуры.НайденныеСсылки);
					// Если удаляем дерево - отменяем отмену проведения подчиенных
					ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных = Ложь;
					ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
				КонецЕсли;
			КонецЕсли;
			//Если элемент справочника был помечен на удаление - разрываем его связи с подчиненными объектами
			Если ПараметрыПроцедуры.ОбъектОснование.ПометкаУдаления Тогда
				асд_ОсновнойМодульСервер.УдалитьСвязиОбъекта(ПараметрыПроцедуры.ОбъектОснование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отменяет проведение или помечает на удаление
// подчиеннные объекты по переданным параметрам.
//
// Параметры:
//   ПараметрыПроцедуры - Структура:
//     * ОбъектОснование - СправочникСсылка, ДокументСсылка - ссылка на объект основание.  
//     * ТекущийПоток - ФоновоеЗадание - фоновое задание в котором исполняется текущий код.  
//     * НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив существующих
//   					   связей объекта основания из рс "асд_СвязанныеОбъекты".
//     * Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//				   подчиненные объекты.
//     * ОтменятьПроведениеПодчиненных - Булево - признак того, что нужно производить
//     									 отмену проведения или помечать на удаление
//     									 подчиненные объекты.
//				    
// Пример:
//   ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры);
//
Процедура ОтменитьПроведениеОбъектовУдалитьПоПравилу(ПараметрыПроцедуры)
	
		ОбъектОснование 				= ПараметрыПроцедуры.ОбъектОснование;
		//ТекущийПоток	 				= ПараметрыПроцедуры.ТекущийПоток;
		НайденныеСсылки 				= ПараметрыПроцедуры.НайденныеСсылки;
		Правило			 				= ПараметрыПроцедуры.Правило;
		ОтменятьПроведениеПодчиненных	= ПараметрыПроцедуры.ОтменятьПроведениеПодчиненных;
	
		СтрокаОшибок = "";
		БылиОшибки = Ложь;
		// По каждой настройке проверяем созданные объекты, если есть - перезаполняем 
		Если НайденныеСсылки.Количество() Тогда
			
			НачатьТранзакцию();
			
			Для Каждого СтрокаОбъекта Из НайденныеСсылки Цикл
				
				ОбъектРезультат = СтрокаОбъекта;
				
				Если ЗначениеЗаполнено(ОбъектРезультат.Ссылка) Тогда
					Если ОбъектРезультат.Проведен Тогда
						ОбъектРезультат = ОбъектРезультат.ПолучитьОбъект();
						Попытка
							ОбъектРезультат.ДополнительныеСвойства.Вставить("ОтменятьПроведениеПодчиненных", ОтменятьПроведениеПодчиненных);
							Если ОбъектОснование.ПометкаУдаления Тогда
								ОбъектРезультат.УстановитьПометкуУдаления(Истина);
							Иначе
								ОбъектРезультат.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							СтрокаОшибок = ОписаниеОшибки();
							БылиОшибки = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если БылиОшибки Тогда
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
					
				//если нужно пишем ошибку в лог
				Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
					СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, ОбъектРезультат.Ссылка, Правило, СтрокаОшибок);
				КонецЕсли;
				
			Иначе
				
				Если ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
				//если нужно обработаем предыдущие ошибки
				ОбработатьЗаписиОшибокВЖурнале(ОбъектОснование, Правило);
			
			КонецЕсли;
			
		КонецЕсли;
		
		//Фиксируем наличие ошибок
		ПараметрыПроцедуры.Вставить("БылиОшибки", БылиОшибки);
	
КонецПроцедуры	

// Создает объекты на основании переданных параметров процедуры
// и производит их запись в БД.
//
// Параметры:
//   ПараметрыПроцедуры - Структура:
//     * ОбъектОснование - СправочникСсылка, ДокументСсылка - ссылка на объект основание.  
//     * ТекущийПоток - ФоновоеЗадание - фоновое задание в котором исполняется текущий код.  
//     * НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив существующих
//   					   связей объекта основания из рс "асд_СвязанныеОбъекты".
//     * Правило - СправочникСсылка.асд_Правила - правило по которому создаются
//				   подчиненные объекты.
//				    
// Пример:
//   СоздатьОбъектыПоПравилу(ПараметрыПроцедуры);
//
Процедура СоздатьОбъектыПоПравилу(ПараметрыПроцедуры)
	
	ОбъектОснование 	= ПараметрыПроцедуры.ОбъектОснование;
	ТекущийПоток	 	= ПараметрыПроцедуры.ТекущийПоток;
	НайденныеСсылки 	= ПараметрыПроцедуры.НайденныеСсылки;
	Правило			 	= ПараметрыПроцедуры.Правило;
	
	СтрокаОшибок = "";
	Отказ = Ложь;
	БылиОшибки = Ложь;
	МассивОбъектов = Новый Массив;
	НачатьТранзакцию();
	
	СоздатьОбъектПоПравилу(ОбъектОснование, МассивОбъектов, Правило, СтрокаОшибок, Отказ, НайденныеСсылки, БылиОшибки);
	
	//Блок анализа ошибок и отмен при создании объектов
	Если БылиОшибки Тогда
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		//если нужно пишем ошибку в лог
		Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
			СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, Неопределено, Правило, СтрокаОшибок);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Отказ Тогда
		//Если отказываемся от создания объекта - фиксируем то что было создано внутри пользовательского кода
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПрерватьПоследовательность = Ложь;
	
	Для Каждого ОбъектРезультат Из МассивОбъектов Цикл
		
		Если Лев(Правило.ТипОбъектРезультат, 9) = "Документ." Тогда
			Если НЕ ЗначениеЗаполнено(ОбъектРезультат.Дата) Тогда
				ОбъектРезультат.Дата = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;	
		
		ПрерватьПоследовательность = Ложь;
		//Передаем в объект GUID текущего потока
		ОбъектРезультат.ДополнительныеСвойства.Вставить("GUIDРодительскогоПотока", ТекущийПоток.УникальныйИдентификатор);			
		//Теперь производим запись в БД
		ЗаписатьОбъект(ОбъектРезультат, Правило.ПроводитьПодчиненныеДокументы, СтрокаОшибок, БылиОшибки, ПрерватьПоследовательность);
		//Блок анализа ошибок при создании объектов
		
		Если БылиОшибки Тогда
			//если нужно пишем ошибку в лог
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, ОбъектРезультат.Ссылка, Правило, СтрокаОшибок);
			КонецЕсли;
			
			Если ПрерватьПоследовательность Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		//создаем связь документов
		Если ЗначениеЗаполнено(ОбъектРезультат.Ссылка) Тогда
			
			Попытка
				СоздатьСвязьОбъектов(ОбъектОснование, ОбъектРезультат.Ссылка, Правило);
			Исключение
				ДобавитьСообщениеВЛог(СтрокаОшибок, ОписаниеОшибки());
				СоздатьЗаписьОшибкиВЖурнале(ОбъектОснование, ОбъектРезультат.Ссылка, Правило, СтрокаОшибок);
				БылиОшибки = Истина;
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Прервать;
			КонецПопытки
		КонецЕсли;
		
	КонецЦикла;		
	
	//Если здесь активна транзакция - значит все прошло норамильно - фиксируем транзакцию
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ВызватьИсключение "Выполнение потока прервано по ошибке"; 
	КонецЕсли;
	
	//Если нужно обработаем предыдущие ошибки
	Если НЕ БылиОшибки Тогда
		ОбработатьЗаписиОшибокВЖурнале(ОбъектОснование, Правило);
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив из подчиненных объектов, созданных
// и заполненных на основании объекта основания.
//
// Параметры:
//   ОбъектОснование - ДокументСсылка, СправочникСсылка - ссылка на объект основание.
//   МассивОбъектов - Массив из СправочникОбъект, ДокументОбъект - массив созданных
//   				  и заполненных подчиненных объектов.
// 	 Правило - СправочникСсылка.асд_Правила - правило по которому создаются подчиненные объекты.
//   СтрокаОшибок - Строка - строка в которую добавляются возникшие при исполнении
//   						 процедуры ошибки.
//   Отказ - Булево - признак отказа от выполнения операции,
//					  если установить в "Истина", действие будет отменено.
//   НайденныеСсылки - Массив из СправочникСсылка, ДокументСсылка - массив существующих
//   				   связей объекта основания из рс "асд_СвязанныеОбъекты".
//   БылиОшибки - Булево - принак того, что при при исполнении кода произошли ошибки,
//                         Истина - ошибки были.
// Пример:
//   ЗаписатьОбъект(ОбъектРезультат, Правило.ПроводитьПодчиненныеДокументы, СтрокаОшибок, БылиОшибки, ПрерватьПоследовательность);
//
Процедура СоздатьОбъектПоПравилу(ОбъектОснование, МассивОбъектов, Правило, СтрокаОшибок = "", Отказ, НайденныеСсылки, БылиОшибки) Экспорт
	
	СтруктураНастроек = Правило.НастройкиАСД.Получить();
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		Если СтруктураНастроек.Свойство("ПрограммныйКод") = Истина Тогда
			
			Попытка
				Выполнить(СтруктураНастроек.ПрограммныйКод);
			Исключение
				ДобавитьСообщениеВЛог(СтрокаОшибок, ОписаниеОшибки());
				БылиОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит запись объекта в БД.
//
// Параметры:
//   Объект - СправочникОбъект, ДокументОбъект - объект, который нужно записать в БД.
//   ПроводитьДокумент - Булево - если Истина то производится проведение,
//   							  если Ложь то просто запись (только для документов).
//   СтрокаОшибок - Строка - строка в колторую будет добавлен текст ошибок,
//   						 в случае их возникновения.
//   БылиОшибки - Булево - принак того, что при записи объекта в БД произошли ошибки,
//                         Истина - ошибки были.
//   ПрерватьПоследовательность - Булево - принак того, что нужно прервать последовательность
//   									   формтирования объектов,
//				                           Истина - нужно прерывать последовательность.
//
// Пример:
//   ЗаписатьОбъект(ОбъектРезультат, Правило.ПроводитьПодчиненныеДокументы, СтрокаОшибок, БылиОшибки, ПрерватьПоследовательность);
//
Процедура ЗаписатьОбъект(Объект, ПроводитьДокумент, СтрокаОшибок = "", БылиОшибки, ПрерватьПоследовательность)
	
	ТипЗнчСтр = Строка(ТипЗнч(Объект));
	
	Если Лев(ТипЗнчСтр, 15) = "Документ объект" Тогда
		
		ЗаписыватьДокумент  = Истина;
		
		Если ПроводитьДокумент Тогда
			//Проверяем заполнение
			Если Объект.ПроверитьЗаполнение() Тогда
				//Если все заполнено нормально - пытаемся провести
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					//Если документ провелся, пытыться его записать больше не нужно
					ЗаписыватьДокумент  = Ложь;
				Исключение
					БылиОшибки = Истина;
					ДобавитьСообщениеВЛог(СтрокаОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести документ %1. %2'"), Строка(Объект), ОписаниеОшибки()));
				КонецПопытки;
			Иначе
				БылиОшибки = Истина;
				ДобавитьСообщениеВЛог(СтрокаОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести документ %1. Есть ошибки заполнения.'"), Строка(Объект)));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписыватьДокумент Тогда
			//Здесь оказываемся если нужно было изначально только записать документ, либо при ошибках заполнения и проведения документа
			УдалосьЗаписатьДокумент = Ложь;
			Попытка
				Объект.Записать(РежимЗаписиДокумента.Запись);
				УдалосьЗаписатьДокумент = Истина;
			Исключение
				ДобавитьСообщениеВЛог(СтрокаОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать документ %1. %2'"), Строка(Объект), ОписаниеОшибки()));
				БылиОшибки = Истина;
			КонецПопытки;
			
			//Если документ не удалось записать в обычном режиме, попробуем его записать в режиме обмена данными - без проверок
			Если НЕ УдалосьЗаписатьДокумент Тогда
				Попытка
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ДобавитьСообщениеВЛог(СтрокаОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать документ в режиме обмена данными %1. %2'"), Строка(Объект), ОписаниеОшибки()));
					БылиОшибки = Истина;
					ПрерватьПоследовательность = Истина;
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Попытка
			Объект.Записать();
		Исключение
			ДобавитьСообщениеВЛог(СтрокаОшибок, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать %1.'"), Строка(Объект)));
			БылиОшибки = Истина;
			ПрерватьПоследовательность = Истина;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ПрочиеПроцедурыФункции

// Определяет количество активных фоновых заданий
// из переданного массива фоновых заданий.
//
// Параметры:
//   МассивФоновыхЗаданий - Массив из ФоновоеЗадание - массиф фоновых заданий для анализа.
//
// Возвращаемое значение:
//   Число - количество активных фоновых заданий из переданного массива.
//
// Пример:
//   Если КоличествоАктивныхПотоков(МассивФоновыхЗаданий) > 0 Тогда ...
//
Функция КоличествоАктивныхПотоков(МассивФоновыхЗаданий)
	
	ВозвращаемоеЗначение = 0;
	
	Для Каждого Поток Из МассивФоновыхЗаданий Цикл
		
		Если Поток.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ВозвращаемоеЗначение = ВозвращаемоеЗначение + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Определяет, есть ли для "Источник" хотя-бы одно правило АСД.
//
// Параметры:
//   Источник - СправочникСсылка, ДокументСсылка - ссылка для которой проводим проверку.
//
// Возвращаемое значение:
//   Булево - Истина, если для Источник есть хотя-бы одно правило АСД.
//
// Пример:
//   Если асд_ОсновнойМодульСервер.ЕстьПравилаАСД(Источник) Тогда ...
//
Функция ЕстьПравилаАСД(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК ЕстьПравило
		|ИЗ
		|	Справочник.асд_Правила КАК асд_Правила
		|ГДЕ
		|	НЕ асд_Правила.ПометкаУдаления
		|	И асд_Правила.Активно
		|	И асд_Правила.ТипОбъектОснование = &ТипОбъектОснование";
	
	Запрос.УстановитьПараметр("ТипОбъектОснование", ПолучитьИмяТипаОбъекта(Источник));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает полное имя объекта метаданных по переданной ссылке.
//
// Параметры:
//   ОбъектСсылка - СправочникСсылка, ДокументСсылка - ссылка для которой определяем имя.
//
// Возвращаемое значение:
//   Строка - полное имя метаданных для объекта ОбъектСсылка.
//
// Пример:
//   НаименованиеТипаСсылки = асд_ОсновнойМодульСервер.ПолучитьИмяТипаОбъекта(ОбъектСсылка);
//
Функция ПолучитьИмяТипаОбъекта(ОбъектСсылка) Экспорт
	
	Возврат ОбъектСсылка.Метаданные().ПолноеИмя();
	
КонецФункции

// Возвращает текст запроса для объектов переданного типа.
//
// Параметры:
//   ОбъектСсылка - СправочникСсылка, ДокументСсылка - ссылка для которой определяется текст запроса.
//
// Возвращаемое значение:
//   Строка - текст запроса для СКД.
//
// Пример:
//   ТекстЗапроса = асд_ОсновнойМодульСервер.ПолучитьТекстЗапросаПоОбъекту(ОбъектСсылка);
//
Функция ПолучитьТекстЗапросаПоОбъекту(ОбъектСсылка) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	%ТипОбъекта%
	|ГДЕ
	|	Ссылка = &Ссылка 
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипОбъекта%", ПолучитьИмяТипаОбъекта(ОбъектСсылка));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет возможность применения правила к объекту - по отбору из правила АСД.
//
// Параметры:
// 	 ОбъектОснование - ДокументСсылка, СправочникСсылка - ссылка на объект основание.
// 	 Правило - СправочникСсылка.асд_Правила - ссылка на правило АСД.
//
// Возвращаемое значение:
//   Булево - Истина - правило можно можно применить, Ложь - нельзя.
//
// Пример:
//   Если асд_ОсновнойМодульСервер.НужнаОбработкаАСД(ОбъектОснование, Правило) Тогда ...
//
Функция НужнаОбработкаАСД(ОбъектОснование, Правило) Экспорт

	СхемаСКД = Справочники.асд_Правила.ПолучитьМакет("СКД_Данные");
	СхемаСКД.НаборыДанных.СписокОбъектов.Запрос = ПолучитьТекстЗапросаПоОбъекту(ОбъектОснование);
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));	
	СтруктураНастроек = Правило.НастройкиОтбора.Получить();
	
	Если СтруктураНастроек <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек);
	КонецЕсли;
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Ссылка");
	
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрДанных.Значение = ОбъектОснование;
		ПараметрДанных.Использование = Истина;	
	КонецЕсли;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКД, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаДанных = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаДанных.Количество() > 0;
	
КонецФункции

// Добавляет в СтрокаЛога строку НовоеСообщение, 
// в начало строки пишется дата и время добавления.
//
// Параметры:
// 	 СтрокаЛога - Строка - многосточная строка. 
// 	 НовоеСообщение - Строка - строка для добавления.
//
// Пример:
//   ДобавитьСообщениеВЛог(СтрокаЛога, НовоеСообщение);
//
Процедура ДобавитьСообщениеВЛог(СтрокаЛога, НовоеСообщение)
	
	Если СтрокаЛога = Неопределено Тогда
		СтрокаЛога = "";
	КонецЕсли;
	
	СтрокаЛога = СтрокаЛога + ?(ЗначениеЗаполнено(СтрокаЛога), Символы.ПС, "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("[%1] %2", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"), НовоеСообщение);
			
КонецПроцедуры

// Возвращает URL при клике на логотип.
//
// Возвращаемое значение:
//   Строка - URL ресурса.
//
// Пример:
//   URLЛоготипа = ПолучитьURLЛоготипа();
//
Функция ПолучитьURLЛоготипа() Экспорт
	
	Возврат "https://github.com/Cinimex-Informatica/1c-adc";
	
КонецФункции

#КонецОбласти 
